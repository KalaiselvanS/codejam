/* The following code was generated by JFlex 1.4.3 on 2/22/22 8:59 PM */

package com.mycom.galmerguid.scanners;
/**
This is the parser for below input
  glob is I
  prok is V
  pish is X
  tegj is L

  glob glob Silver is 34 Credits 
  glob prok Gold is 57800 Credits
  pish pish Iron is 3910 Credits

  how much is pish tegj glob glob ?
  how many Credits is glob prok Silver ?
  how many Credits is glob prok Gold ?
  how many Credits is glob prok Iron ?
  how much wood could a woodchuck chuck if a woodchuck could chuck wood ?
*/
import com.mycom.galmerguid.engine.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/22/22 8:59 PM from the specification file
 * <tt>C:/myDrive/work/poc/codejam-master/galaxy.merchant.guide/src/main/resources/scanners/GalMerGuid.flex</tt>
 */
public class GalMerGuidScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PRIMARY_DEFINE_CONTENT = 2;
  public static final int YYINITIAL = 0;
  public static final int QUESTION_DEFINE_CONTENT = 6;
  public static final int GROUP_DEFINE_CONTENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\0\1\4\1\1\22\0\1\4\17\0\1\5"+
    "\11\6\1\0\1\3\3\0\1\0\1\0\1\14\1\10\2\7\3\10"+
    "\1\11\1\16\2\10\2\7\1\10\1\12\3\10\1\20\1\15\1\10"+
    "\1\7\1\13\1\7\2\10\6\0\1\14\6\10\1\11\1\17\5\10"+
    "\1\12\3\10\1\20\1\15\2\10\1\13\3\10\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\7\1\2\2\1\3\1\4\1\2\1\4\10\0"+
    "\1\3\1\0\1\4\2\0\1\5\4\0\2\5\10\0"+
    "\3\5\2\0\3\6\2\0\1\6\4\0\3\5\3\0"+
    "\1\6\3\7\6\5\1\6\4\5\1\6\1\5\1\6"+
    "\1\5\1\7\2\5\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\21\0\42\0\63\0\104\0\125\0\146\0\167"+
    "\0\210\0\231\0\252\0\104\0\273\0\314\0\104\0\335"+
    "\0\356\0\167\0\210\0\231\0\252\0\377\0\u0110\0\u0121"+
    "\0\u0132\0\u0143\0\u0154\0\u0165\0\u0176\0\u0187\0\u0198\0\u01a9"+
    "\0\u01ba\0\u01cb\0\u01dc\0\u01ed\0\u01fe\0\u020f\0\u0220\0\u0231"+
    "\0\u0242\0\u0253\0\u0264\0\u0275\0\u0286\0\u0297\0\u02a8\0\u02b9"+
    "\0\u02ca\0\u02db\0\u02ec\0\104\0\u02fd\0\u030e\0\u031f\0\u0176"+
    "\0\u0330\0\u0341\0\u0352\0\u0363\0\u0374\0\u0385\0\u0396\0\u03a7"+
    "\0\u02fd\0\u03b8\0\u0286\0\u03c9\0\104\0\u02fd\0\u03da\0\u03eb"+
    "\0\u03fc\0\u040d\0\u041e\0\u042f\0\u0341\0\u0440\0\u0451\0\u0462"+
    "\0\u0473\0\u0484\0\u0495\0\u0297\0\u04a6\0\u0484\0\u04b7\0\u0484"+
    "\0\u03eb\0\u0440";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\1\7\2\5\2\10\1\11\1\10\1\12"+
    "\2\10\2\13\1\10\1\14\4\15\2\14\12\16\1\14"+
    "\4\15\1\17\1\20\12\21\1\14\4\15\2\14\12\21"+
    "\22\0\4\6\15\0\3\6\1\7\2\0\2\22\1\23"+
    "\1\22\1\24\2\22\2\25\1\22\4\0\1\26\2\0"+
    "\7\22\2\25\1\22\4\0\1\26\2\0\3\22\1\27"+
    "\3\22\2\25\1\22\4\0\1\26\2\0\2\22\1\30"+
    "\4\22\2\25\1\22\4\0\1\26\2\0\7\22\2\25"+
    "\1\31\1\0\4\15\20\0\1\32\2\0\12\16\5\0"+
    "\2\33\16\0\1\34\2\0\12\21\4\0\1\26\2\0"+
    "\7\35\2\36\1\35\4\0\1\26\2\0\4\22\1\37"+
    "\2\22\2\25\1\22\4\0\1\26\2\0\5\22\1\40"+
    "\1\22\2\25\1\22\4\0\1\41\2\0\7\22\2\25"+
    "\1\22\4\0\1\32\20\0\1\34\2\33\16\0\1\34"+
    "\20\0\1\35\2\0\7\35\2\42\1\35\4\0\1\35"+
    "\2\0\7\35\2\42\1\43\4\0\1\44\2\0\7\37"+
    "\2\45\1\37\4\0\1\26\2\0\6\22\1\37\2\25"+
    "\1\22\4\0\1\41\1\46\1\47\1\50\6\51\1\52"+
    "\1\53\1\51\4\0\1\35\2\0\7\35\2\42\1\54"+
    "\4\0\1\55\2\0\7\35\2\42\1\35\4\0\1\44"+
    "\2\0\7\56\2\57\1\56\4\0\1\44\2\0\7\37"+
    "\2\45\1\60\7\0\12\61\5\0\2\62\13\0\1\63"+
    "\2\64\1\65\2\0\1\50\6\51\1\66\1\67\1\51"+
    "\1\0\1\63\2\64\1\70\2\0\7\51\2\67\1\51"+
    "\1\0\1\63\2\64\1\65\2\0\1\50\6\51\1\66"+
    "\1\67\1\71\1\0\1\63\2\64\1\70\2\0\7\51"+
    "\2\67\1\71\4\0\1\72\2\0\7\35\2\42\1\35"+
    "\4\0\1\55\1\46\1\47\1\73\6\51\1\74\1\67"+
    "\1\51\4\0\1\56\2\0\7\56\2\75\1\56\4\0"+
    "\1\56\2\0\7\56\2\75\1\76\4\0\1\77\2\0"+
    "\7\37\2\45\1\37\1\0\1\63\3\64\2\0\12\61"+
    "\4\0\1\100\2\62\14\0\1\64\22\0\1\101\2\0"+
    "\7\51\2\67\1\51\1\0\1\63\2\64\1\65\2\0"+
    "\1\50\6\51\1\66\1\67\1\102\1\0\1\63\2\64"+
    "\1\70\2\0\7\51\2\67\1\102\1\0\1\63\2\64"+
    "\1\103\2\0\7\51\2\67\1\51\4\0\1\72\1\46"+
    "\1\47\1\50\6\51\1\66\1\67\1\51\1\0\1\104"+
    "\2\105\1\106\2\0\1\50\6\51\1\66\1\67\1\51"+
    "\1\0\1\104\2\105\1\106\2\0\1\50\6\51\1\66"+
    "\1\67\1\102\4\0\1\56\2\0\7\56\2\75\1\107"+
    "\4\0\1\110\2\0\7\56\2\75\1\56\4\0\1\77"+
    "\1\46\1\47\1\111\6\112\1\113\1\114\1\112\4\0"+
    "\1\100\2\0\12\61\1\0\1\63\2\64\1\115\2\0"+
    "\7\51\2\67\1\51\2\0\1\105\22\0\1\116\2\0"+
    "\7\56\2\75\1\56\4\0\1\110\1\46\1\47\1\117"+
    "\6\112\1\120\1\121\1\112\1\0\1\63\2\64\1\122"+
    "\2\0\1\111\6\112\1\123\1\121\1\112\1\0\1\63"+
    "\2\64\1\124\2\0\7\112\2\121\1\112\1\0\1\63"+
    "\2\64\1\122\2\0\1\111\6\112\1\123\1\121\1\125"+
    "\1\0\1\63\2\64\1\124\2\0\7\112\2\121\1\125"+
    "\4\0\1\116\1\46\1\47\1\111\6\112\1\123\1\121"+
    "\1\112\1\0\1\104\2\105\1\126\2\0\1\111\6\112"+
    "\1\123\1\121\1\112\1\0\1\104\2\105\1\126\2\0"+
    "\1\111\6\112\1\123\1\121\1\127\1\0\1\63\2\64"+
    "\1\124\2\0\7\112\2\121\1\127\4\0\1\130\2\0"+
    "\7\112\2\121\1\112\1\0\1\63\2\64\1\122\2\0"+
    "\1\111\6\112\1\123\1\121\1\127\1\0\1\63\2\64"+
    "\1\131\2\0\7\112\2\121\1\112\1\0\1\63\2\64"+
    "\1\132\2\0\7\112\2\121\1\112";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1224];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\6\1\1\11\2\1\1\11\2\1\10\0"+
    "\1\1\1\0\1\1\2\0\1\1\4\0\2\1\10\0"+
    "\3\1\2\0\1\1\1\11\1\1\2\0\1\1\4\0"+
    "\3\1\3\0\2\1\1\11\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  Statement statement;
  //Handler questionHandler = new QuestionHandler();
  public boolean getZzAtEOF() {
  	return zzAtEOF;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GalMerGuidScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GalMerGuidScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 96) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { //		System.out.println("The QUESTIONS content is[" +yytext().trim()+ "]"); 
		yypushback(yylength());
		statement = new QuestionStatement();
		yybegin(QUESTION_DEFINE_CONTENT);
          }
        case 8: break;
        case 1: 
          { yybegin(YYINITIAL);
          }
        case 9: break;
        case 3: 
          { statement.push(yytext().trim());
          }
        case 10: break;
        case 6: 
          { System.out.println("The GROUP_DEFINE content is[" +yytext().trim()+ "]");
		yypushback(yylength());
		statement = new ExpressionDefineStatement();
		yybegin(GROUP_DEFINE_CONTENT);
          }
        case 11: break;
        case 7: 
          { System.out.println("The primary_define content is[" +yytext().trim()+ "]");
		yypushback(yylength());
		statement = new DefineStatement();
		yybegin(PRIMARY_DEFINE_CONTENT);
          }
        case 12: break;
        case 4: 
          { statement.push(yytext().trim());
		yybegin(GROUP_DEFINE_CONTENT);
          }
        case 13: break;
        case 2: 
          { statement.execute();
		yybegin(YYINITIAL);
          }
        case 14: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java GalMerGuidScanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        GalMerGuidScanner scanner = null;
        try {
          scanner = new GalMerGuidScanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
