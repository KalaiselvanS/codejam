diff --git a/galaxy.merchant.guide/build.xml b/galaxy.merchant.guide/build.xml
index ca67b7c..6695cfc 100644
--- a/galaxy.merchant.guide/build.xml
+++ b/galaxy.merchant.guide/build.xml
@@ -6,17 +6,16 @@
 	<property name="flex" value="${src}/main/resources/scanners/GalMerGuid.flex" />
 	<property name="inputdir" value="${basedir}/input" />
 
-	<!--You can download it from http://mvnrepository.com/artifact/de.jflex/jflex/1.4.3
-	 http://central.maven.org/maven2/de/jflex/jflex/1.4.3/jflex-1.4.3.jar
-	<taskdef classname="JFlex.anttask.JFlexTask" name="jflex" classpath="${basedir}/lib/JFlex.jar" />
-    -->
+	<!--You can download it from https://mvnrepository.com/artifact/de.jflex/jflex/1.4.3-->
+	<taskdef classname="JFlex.anttask.JFlexTask" name="jflex" classpath="${basedir}/lib/jflex-1.4.3.jar" />
+    
 	<target name="run" depends="compile">
 		<java classname="com.mycom.galmerguid.TestApp" classpath="${target}">
 			<arg line="${inputdir}/test0.inp" />
 		</java>
 	</target>
 
-	<target name="compile"><!-- depends="jflex">-->
+	<target name="compile" depends="jflex">
 		<mkdir dir="${target}" />
 		<javac srcdir="${src}/main/java" destdir="${target}" />
 	</target>
diff --git a/galaxy.merchant.guide/lib/jflex-1.4.3.jar b/galaxy.merchant.guide/lib/jflex-1.4.3.jar
new file mode 100644
index 0000000..8e952a3
--- /dev/null
+++ b/galaxy.merchant.guide/lib/jflex-1.4.3.jar
Binary files differ
diff --git a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Earning.java b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Earning.java
deleted file mode 100644
index e2fc745..0000000
--- a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Earning.java
+++ /dev/null
@@ -1,99 +0,0 @@
-package com.mycom.galmerguid.engine;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Map.Entry;
-
-public class Earning {
-
-	private String name;
-	private Map<Earning, Double> comparableEarnings = new HashMap<Earning, Double>();
-
-	public Earning(String name) {
-		setName(name);
-	}
-
-	private void setName(String name) {
-		this.name = name;
-		Session.addEarning(this);
-	}
-
-	public String getName() {
-		return name;
-	}
-
-	public void addComparableEarning(Earning otherEarning, Double othersValue){
-		comparableEarnings.put(otherEarning, othersValue);
-		otherEarning.comparableEarnings.put(this, 1.0D/othersValue);
-	}
-
-	public void addComparableEarning(Earning otherEarning, int noOfThis, int equvalentNoOfOthers){
-		System.out.format("%d %s is equal to %d %s\n", noOfThis, name, equvalentNoOfOthers, otherEarning.getName());
-		Double othersCalculatedValue = ((double)equvalentNoOfOthers) / noOfThis;
-		addComparableEarning(otherEarning, othersCalculatedValue);
-	}
-
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result + ((name == null) ? 0 : name.hashCode());
-		return result;
-	}
-
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		Earning other = (Earning) obj;
-		if (name == null) {
-			if (other.name != null)
-				return false;
-		} else if (!name.equals(other.name))
-			return false;
-		return true;
-	}
-
-	@Override
-	public String toString() {
-		StringBuilder sb = new StringBuilder();
-		sb.append("Earning{").append(name).append(" is ");
-		for (Entry<Earning, Double> entry : comparableEarnings.entrySet()) {
-			sb.append("[").append(entry.getValue()).append(" X ").append(
-					entry.getKey().getName()).append("]");
-		}
-		sb.append("}");
-		return sb.toString();
-	}
-	
-	public double getOtherEarningValue(Earning otherEarning) {
-		return getOtherEarningValue(otherEarning, this);
-	}
-
-	private double getOtherEarningValue(Earning otherEarning, Earning root) {
-		if (otherEarning.equals(root)) {
-			return 1;
-		}
-		Double otherVal = comparableEarnings.get(otherEarning);
-		if (otherVal == null) {
-			for (Earning other : comparableEarnings.keySet()) {
-				if (other.equals(root)) {
-					continue;
-				}
-				otherVal = other.getOtherEarningValue(otherEarning, this);
-				if (otherVal != null) {
-					return otherVal * comparableEarnings.get(other);
-				}
-			}
-		} else {
-			return otherVal;
-		}
-		
-		throw new RuntimeException(String.format(
-				"%s does not meet the relation with %s", root.name, otherEarning.name));
-	}
-}
diff --git a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Exchange.java b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Exchange.java
new file mode 100644
index 0000000..5659dc0
--- /dev/null
+++ b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Exchange.java
@@ -0,0 +1,99 @@
+package com.mycom.galmerguid.engine;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+
+public class Exchange {
+
+	private String name;
+	private Map<Exchange, Double> comparableExchanges = new HashMap<Exchange, Double>();
+
+	public Exchange(String name) {
+		setName(name);
+	}
+
+	private void setName(String name) {
+		this.name = name;
+		Session.addExchange(this);
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void addComparableExchange(Exchange otherExchange, Double othersValue){
+		comparableExchanges.put(otherExchange, othersValue);
+		otherExchange.comparableExchanges.put(this, 1.0D/othersValue);
+	}
+
+	public void addComparableExchange(Exchange otherExchange, int noOfThis, int equvalentNoOfOthers){
+		System.out.format("%d %s is equal to %d %s\n", noOfThis, name, equvalentNoOfOthers, otherExchange.getName());
+		Double othersCalculatedValue = ((double)equvalentNoOfOthers) / noOfThis;
+		addComparableExchange(otherExchange, othersCalculatedValue);
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((name == null) ? 0 : name.hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		Exchange other = (Exchange) obj;
+		if (name == null) {
+			if (other.name != null)
+				return false;
+		} else if (!name.equals(other.name))
+			return false;
+		return true;
+	}
+
+	@Override
+	public String toString() {
+		StringBuilder sb = new StringBuilder();
+		sb.append("Exchange{").append(name).append(" is ");
+		for (Entry<Exchange, Double> entry : comparableExchanges.entrySet()) {
+			sb.append("[").append(entry.getValue()).append(" X ").append(
+					entry.getKey().getName()).append("]");
+		}
+		sb.append("}");
+		return sb.toString();
+	}
+	
+	public double getOtherExchangeValue(Exchange otherExchange) {
+		return getOtherExchangeValue(otherExchange, this);
+	}
+
+	private double getOtherExchangeValue(Exchange otherExchange, Exchange root) {
+		if (otherExchange.equals(root)) {
+			return 1;
+		}
+		Double otherVal = comparableExchanges.get(otherExchange);
+		if (otherVal == null) {
+			for (Exchange other : comparableExchanges.keySet()) {
+				if (other.equals(root)) {
+					continue;
+				}
+				otherVal = other.getOtherExchangeValue(otherExchange, this);
+				if (otherVal != null) {
+					return otherVal * comparableExchanges.get(other);
+				}
+			}
+		} else {
+			return otherVal;
+		}
+		
+		throw new RuntimeException(String.format(
+				"%s does not meet the relation with %s", root.name, otherExchange.name));
+	}
+}
diff --git a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Executer.java b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Executer.java
index e754ac3..fba01c2 100644
--- a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Executer.java
+++ b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Executer.java
@@ -26,9 +26,7 @@
 	public void run() {
 		try {
 			System.out.format("====> Interpreter starts for the programe in the file %s !!! <====\n\n", fileName);
-			GalMerGuidScanner scanner = new GalMerGuidScanner(
-					new java.io.FileReader(fileName));
-			scanner = new GalMerGuidScanner(new java.io.FileReader(fileName));
+			GalMerGuidScanner scanner = new GalMerGuidScanner(new java.io.FileReader(fileName));
 			while (!scanner.getZzAtEOF()) {
 				int i = scanner.yylex();
 			}
diff --git a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/ExpressionDefineStatement.java b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/ExpressionDefineStatement.java
index 0c0db4f..6551fc9 100644
--- a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/ExpressionDefineStatement.java
+++ b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/ExpressionDefineStatement.java
@@ -22,9 +22,9 @@
 				throw new SyntaxError(String.format("Operand stack size mismatch error %d", stack.size()));
 			}
 
-			String rhsEarningStr = stack.pop();
-			Earning rhsEarning = Session.getEarning(rhsEarningStr);
-			if (rhsEarning == null) {rhsEarning = new Earning(rhsEarningStr);}
+			String rhsExchangeStr = stack.pop();
+			Exchange rhsExchange = Session.getExchange(rhsExchangeStr);
+			if (rhsExchange == null) {rhsExchange = new Exchange(rhsExchangeStr);}
 
 			int rhsNumber = 1;
 			List<String> numList = new ArrayList<String>();
@@ -37,22 +37,22 @@
 
 			stack.pop();// removes the opperator
 
-			String lhsEarningStr = stack.pop();
-			Earning lhsEarning = Session.getEarning(lhsEarningStr);
-			if (lhsEarning == null) {lhsEarning = new Earning(lhsEarningStr);}
+			String lhsExchangeStr = stack.pop();
+			Exchange lhsExchange = Session.getExchange(lhsExchangeStr);
+			if (lhsExchange == null) {lhsExchange = new Exchange(lhsExchangeStr);}
 
 			int lhsNumber = 1;
 			if (stack.size() > 0) {
 				lhsNumber = GalaxyCommanUtil.parseNumber(stack);
 			}
 
-			lhsEarning.addComparableEarning(rhsEarning, lhsNumber, rhsNumber);
-			rhsEarning.addComparableEarning(lhsEarning, rhsNumber, lhsNumber);
+			lhsExchange.addComparableExchange(rhsExchange, lhsNumber, rhsNumber);
+			rhsExchange.addComparableExchange(lhsExchange, rhsNumber, lhsNumber);
 
-			Session.addEarning(lhsEarning);
-			Session.addEarning(rhsEarning);
+			Session.addExchange(lhsExchange);
+			Session.addExchange(rhsExchange);
 
-//			System.out.println(Session.context().allEarnings);
+//			System.out.println(Session.context().allExchanges);
 		}catch (java.lang.IllegalArgumentException e) {
 			throw new IllegalArgumentException(String.format("[%s is not a valid value symbal]",""));
 		}
diff --git a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/QuestionStatement.java b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/QuestionStatement.java
index 90227e3..1cbb688 100644
--- a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/QuestionStatement.java
+++ b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/QuestionStatement.java
@@ -26,9 +26,9 @@
 			if (stack.size() < 3 || !GalaxyCommanUtil.stackSearchSymbal(stack, "is")) {
 				return resultCode = -1;
 			}
-			String rhsEarningStr = null;
-			if (Session.hasEarning(stack.peek())) {
-				rhsEarningStr = stack.pop();
+			String rhsExchangeStr = null;
+			if (Session.hasExchange(stack.peek())) {
+				rhsExchangeStr = stack.pop();
 			}
 
 			int rhsNumber = 1;
@@ -42,31 +42,31 @@
 
 			stack.pop();// removes the opperator
 
-			String lhsEarningStr = null;
-			if (Session.hasEarning(stack.peek())) {
-				lhsEarningStr = stack.pop();
+			String lhsExchangeStr = null;
+			if (Session.hasExchange(stack.peek())) {
+				lhsExchangeStr = stack.pop();
 			}
 
 			double result;
-			Earning rhsEarning = Session.getEarning(rhsEarningStr);
-			Earning lhsEarning = Session.getEarning(lhsEarningStr);
-			if (rhsEarning != null) {
-//				result = (int)Math.round(rhsNumber * rhsEarning.getOtherEarningValue(lhsEarning));
-				result = rhsNumber * rhsEarning.getOtherEarningValue(lhsEarning);
+			Exchange rhsExchange = Session.getExchange(rhsExchangeStr);
+			Exchange lhsExchange = Session.getExchange(lhsExchangeStr);
+			if (rhsExchange != null) {
+//				result = (int)Math.round(rhsNumber * rhsExchange.getOtherExchangeValue(lhsExchange));
+				result = rhsNumber * rhsExchange.getOtherExchangeValue(lhsExchange);
 			} else {
 				result = rhsNumber;
 			}
 
 			resultBuilder.addAll(numList);
-			if (rhsEarning != null) {
-				resultBuilder.add(rhsEarning.getName());
+			if (rhsExchange != null) {
+				resultBuilder.add(rhsExchange.getName());
 			}
 			resultBuilder.add("is");
 			resultBuilder.add(String.valueOf(result));
-			if (lhsEarning != null) {
-				resultBuilder.add(lhsEarning.getName());
-			} else if (rhsEarning != null) {
-				resultBuilder.add(rhsEarning.getName());
+			if (lhsExchange != null) {
+				resultBuilder.add(lhsExchange.getName());
+			} else if (rhsExchange != null) {
+				resultBuilder.add(rhsExchange.getName());
 			}
 			resultCode = 1;
 
@@ -93,5 +93,4 @@
 		return response.toString();
 	}
 
-
 }
diff --git a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Session.java b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Session.java
index 60f5d2a..9dadbec 100644
--- a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Session.java
+++ b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/engine/Session.java
@@ -9,7 +9,7 @@
 public class Session {
 
 	private final Map<String, GalaxyNumber> galaxyNumbers = new HashMap<String, GalaxyNumber>();
-	private final Map<String, Earning> allEarnings = new HashMap<String, Earning>();
+	private final Map<String, Exchange> allExchanges = new HashMap<String, Exchange>();
 	private final List<QuestionStatement> allQuestions = new ArrayList<QuestionStatement>();
 
 	private static final ThreadLocal<Session> sessionHolder = new ThreadLocal<Session>() {
@@ -27,12 +27,12 @@
 		context().allQuestions.add(questionStatement);
 	}
 
-	public static boolean hasEarning(String nameOfEarning) {
-		return context().allEarnings.containsKey(nameOfEarning);
+	public static boolean hasExchange(String nameOfExchange) {
+		return context().allExchanges.containsKey(nameOfExchange);
 	}
 
-	public static Earning getEarning(String nameOfEarning) {
-		return context().allEarnings.get(nameOfEarning);
+	public static Exchange getExchange(String nameOfExchange) {
+		return context().allExchanges.get(nameOfExchange);
 	}
 
 	public static Collection<GalaxyNumber> getAllGalaxyNumbers() {
@@ -43,8 +43,8 @@
 		return context().galaxyNumbers.get(galaxySymbal);
 	}
 
-	public static void addEarning(Earning earning) {
-		context().allEarnings.put(earning.getName(), earning);
+	public static void addExchange(Exchange exchange) {
+		context().allExchanges.put(exchange.getName(), exchange);
 	}
 
 	public static List<QuestionStatement> getAllQuestions() {
diff --git a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/scanners/GalMerGuidScanner.java b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/scanners/GalMerGuidScanner.java
index 6d11db1..104a660 100644
--- a/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/scanners/GalMerGuidScanner.java
+++ b/galaxy.merchant.guide/src/main/java/com/mycom/galmerguid/scanners/GalMerGuidScanner.java
@@ -1,12 +1,30 @@
-package com.mycom.galmerguid.scanners;
+/* The following code was generated by JFlex 1.4.3 on 2/22/22 8:59 PM */
 
+package com.mycom.galmerguid.scanners;
+/**
+This is the parser for below input
+  glob is I
+  prok is V
+  pish is X
+  tegj is L
+
+  glob glob Silver is 34 Credits 
+  glob prok Gold is 57800 Credits
+  pish pish Iron is 3910 Credits
+
+  how much is pish tegj glob glob ?
+  how many Credits is glob prok Silver ?
+  how many Credits is glob prok Gold ?
+  how many Credits is glob prok Iron ?
+  how much wood could a woodchuck chuck if a woodchuck could chuck wood ?
+*/
 import com.mycom.galmerguid.engine.*;
 
 /**
  * This class is a scanner generated by 
  * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
- * from the specification file
- * <tt>C:/Users/sn2150/git/codejam/galaxy.merchant.guide/src/main/resources/scanners/GalMerGuid.flex</tt>
+ * on 2/22/22 8:59 PM from the specification file
+ * <tt>C:/myDrive/work/poc/codejam-master/galaxy.merchant.guide/src/main/resources/scanners/GalMerGuid.flex</tt>
  */
 public class GalMerGuidScanner {
 
diff --git a/galaxy.merchant.guide/src/main/resources/scanners/GalMerGuid.flex b/galaxy.merchant.guide/src/main/resources/scanners/GalMerGuid.flex
index f75c7e6..ff6a76f 100644
--- a/galaxy.merchant.guide/src/main/resources/scanners/GalMerGuid.flex
+++ b/galaxy.merchant.guide/src/main/resources/scanners/GalMerGuid.flex
@@ -1,5 +1,21 @@
 package com.mycom.galmerguid.scanners;
+/**
+This is the parser for below input
+  glob is I
+  prok is V
+  pish is X
+  tegj is L
 
+  glob glob Silver is 34 Credits 
+  glob prok Gold is 57800 Credits
+  pish pish Iron is 3910 Credits
+
+  how much is pish tegj glob glob ?
+  how many Credits is glob prok Silver ?
+  how many Credits is glob prok Gold ?
+  how many Credits is glob prok Iron ?
+  how much wood could a woodchuck chuck if a woodchuck could chuck wood ?
+*/
 import com.mycom.galmerguid.engine.*;
 %%
 %public
diff --git a/galaxy.merchant.guide/src/test/java/com/mycom/galmerguid/engine/EarningTest.java b/galaxy.merchant.guide/src/test/java/com/mycom/galmerguid/engine/EarningTest.java
deleted file mode 100644
index 1200cc6..0000000
--- a/galaxy.merchant.guide/src/test/java/com/mycom/galmerguid/engine/EarningTest.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.mycom.galmerguid.engine;
-
-import static org.junit.Assert.*;
-
-import org.junit.Test;
-
-public class EarningTest {
-	
-	Earning silver = new Earning("silver");
-	Earning gold = new Earning("gold");
-	Earning rupees = new Earning("rupees");
-
-	@Test
-	public void testAddComparableEarningEarningDouble() {
-		// TODO
-	}
-
-	@Test
-	public void testAddComparableEarningEarningIntInt() {
-		// TODO
-	}
-
-	@Test
-	public void testGetOtherEarningValue() {
-		silver.addComparableEarning(rupees, 1, 50);
-		rupees.addComparableEarning(silver, 50, 1);
-		
-		gold.addComparableEarning(silver, 1, 55);
-		silver.addComparableEarning(gold, 55, 1);
-		
-		double goldRateInRupees = gold.getOtherEarningValue(rupees);
-		assertEquals(50*55, (int)goldRateInRupees);
-	}
-
-	@Test(expected=RuntimeException.class)
-	public void testGetOtherEarningValueFailure1() {
-		gold.addComparableEarning(silver, 1, 55);
-		silver.addComparableEarning(gold, 55, 1);
-		
-		gold.getOtherEarningValue(rupees);
-	}
-	
-	@Test(expected=RuntimeException.class)
-	public void testGetOtherEarningValueFailure2() {
-		gold.addComparableEarning(gold, 1, 1);
-		
-		gold.getOtherEarningValue(rupees);
-	}
-}
diff --git a/galaxy.merchant.guide/src/test/java/com/mycom/galmerguid/engine/ExchangeTest.java b/galaxy.merchant.guide/src/test/java/com/mycom/galmerguid/engine/ExchangeTest.java
new file mode 100644
index 0000000..f871665
--- /dev/null
+++ b/galaxy.merchant.guide/src/test/java/com/mycom/galmerguid/engine/ExchangeTest.java
@@ -0,0 +1,49 @@
+package com.mycom.galmerguid.engine;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class ExchangeTest {
+	
+	Exchange silver = new Exchange("silver");
+	Exchange gold = new Exchange("gold");
+	Exchange rupees = new Exchange("rupees");
+
+	@Test
+	public void testAddComparableExchangeExchangeDouble() {
+		// TODO
+	}
+
+	@Test
+	public void testAddComparableExchangeExchangeIntInt() {
+		// TODO
+	}
+
+	@Test
+	public void testGetOtherExchangeValue() {
+		silver.addComparableExchange(rupees, 1, 50);
+		rupees.addComparableExchange(silver, 50, 1);
+		
+		gold.addComparableExchange(silver, 1, 55);
+		silver.addComparableExchange(gold, 55, 1);
+		
+		double goldRateInRupees = gold.getOtherExchangeValue(rupees);
+		assertEquals(50*55, (int)goldRateInRupees);
+	}
+
+	@Test(expected=RuntimeException.class)
+	public void testGetOtherExchangeValueFailure1() {
+		gold.addComparableExchange(silver, 1, 55);
+		silver.addComparableExchange(gold, 55, 1);
+		
+		gold.getOtherExchangeValue(rupees);
+	}
+	
+	@Test(expected=RuntimeException.class)
+	public void testGetOtherExchangeValueFailure2() {
+		gold.addComparableExchange(gold, 1, 1);
+		
+		gold.getOtherExchangeValue(rupees);
+	}
+}
